// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_DATABASE_URL")
}

//added template models based on class diagram

// Note: majors.json has majorName and department, which is baiscally the same thing

model Admin {
  adminId String @id
  email   String @unique
  user    User   @relation("UserAdmin", fields: [email], references: [email])
}

model User {
  email           String          @id
  firstName       String
  lastName        String
  password        String
  role            String
  gender          String
  themePreference ThemePreference
  profileImage    String

  student    Student?    @relation("UserStudent")
  instructor Instructor? @relation("UserInstructor")
  admin      Admin?      @relation("UserAdmin")
}

enum ThemePreference {
  system
  dark
  light
}

model Student {
  studentId          String               @id
  email              String               @unique
  college            String
  majorId            String
  completedCourses   CompletedCourse[]
  semesterEnrollment SemesterEnrollment[]

  user  User  @relation("UserStudent", fields: [email], references: [email])
  major Major @relation(fields: [majorId], references: [majorId])
}

model CompletedCourse {
  id          Int    @id @default(autoincrement())
  courseId    String
  letterGrade String
  studentId   String

  student Student @relation(fields: [studentId], references: [studentId])
  course  Course  @relation(fields: [courseId], references: [courseId])
}

model SemesterEnrollment {
  id        Int    @id @default(autoincrement())
  semester  String
  studentId String

  student Student           @relation(fields: [studentId], references: [studentId])
  classes ClassEnrollment[]
}

model Major {
  majorId         String   @id
  majorName       String
  college         String
  department      String
  requiredCourses Course[]

  students             Student[]
  CourseMajorOfferings CourseMajorOfferings[] @relation("MajorToCourseOfferings")
}

model Instructor {
  instructorId    String            @id
  email           String            @unique
  college         String
  department      String
  teachingClasses Class[]           @relation("TeachingClasses")
  gradedClasses   Class[]           @relation("GradedClasses")
  Expertise       Expertise[]
  TeachingClasses TeachingClasses[]
  user            User              @relation("UserInstructor", fields: [email], references: [email])

  GradedClasses GradedClasses[]
}

model Expertise {
  id           Int        @id @default(autoincrement())
  expertise    String
  instructorId String
  instructor   Instructor @relation(fields: [instructorId], references: [instructorId])
}

model ClassEnrollment {
  id          Int    @id @default(autoincrement())
  classId     String
  courseId    String
  gradeStatus String
  letterGrade String

  semesterEnrollmentId Int
  semesterEnrollment   SemesterEnrollment @relation(fields: [semesterEnrollmentId], references: [id], onDelete: Cascade)

  @@unique([classId, semesterEnrollmentId])
}

model Class {
  classId             String @id
  courseId            String
  semester            String
  instructionalMethod String
  campus              String
  enrollmentActual    Int
  enrollmentMaximum   Int
  classStatus         String
  section             String

  instructors         Instructor[] @relation("TeachingClasses")
  gradedByInstructors Instructor[] @relation("GradedClasses")
  schedule            Schedule?

  course               Course                 @relation(fields: [courseId], references: [courseId])
  CourseCurrentClasses CourseCurrentClasses[] @relation("ClasstoCurrentCourses")
  TeachingClasses      TeachingClasses[]

  GradedClasses GradedClasses[]
}

model Schedule {
  id           Int    @id @default(autoincrement())
  scheduleType String
  startTime    String
  endTime      String

  classId String @unique
  class   Class  @relation(fields: [classId], references: [classId])
}

model Course {
  courseId     String @id
  courseName   String
  creditHours  Int
  subject      String
  courseNumber String
  description  String
  courseImage  String

  prerequisites        Prerequisite[]
  majorsOffered        Major[]
  currentClasses       Class[]
  CourseCurrentClasses CourseCurrentClasses[] @relation("CourseToCurrentClasses")
  CourseMajorOfferings CourseMajorOfferings[] @relation("CourseToMajorOfferings")
  CompletedCourse      CompletedCourse[]
  // Subjects             Subjects               @relation(fields: [subject], references: [subject])
}

model CourseCurrentClasses {
  id       Int    @id @default(autoincrement())
  courseId String
  classId  String
  course   Course @relation(fields: [courseId], references: [courseId], name: "CourseToCurrentClasses")
  class    Class  @relation(fields: [classId], references: [classId], name: "ClasstoCurrentCourses")
}

model CourseMajorOfferings {
  id       Int    @id @default(autoincrement())
  courseId String
  majorId  String
  Course   Course @relation(fields: [courseId], references: [courseId], name: "CourseToMajorOfferings")
  Major    Major  @relation(fields: [majorId], references: [majorId], name: "MajorToCourseOfferings")
}

model Prerequisite {
  id             Int    @id @default(autoincrement())
  prerequisiteId String
  courseId       String
  minGrade       String

  course Course @relation(fields: [courseId], references: [courseId])
}

model TeachingClasses {
  id           Int    @id @default(autoincrement())
  classId      String
  instructorId String

  class      Class      @relation(fields: [classId], references: [classId])
  instructor Instructor @relation(fields: [instructorId], references: [instructorId])
}

model GradedClasses {
  id           Int    @id @default(autoincrement())
  classId      String
  instructorId String

  class      Class      @relation(fields: [classId], references: [classId])
  instructor Instructor @relation(fields: [instructorId], references: [instructorId])
}

model Subjects {
  subject String @id
  code    String @unique
  // Course  Course[]
}
